---
version: 2.1

commands:
  setup_project:
    description: "Setup the machine, clone the repo, checkout the submodules."
    steps:
      - run: apt-get update && apt-get install -y git ssh unzip
      - run:
          name: Install z3
          command: |
            wget https://github.com/Z3Prover/z3/releases/download/z3-4.8.7/z3-4.8.7-x64-ubuntu-16.04.zip
            unzip z3-4.8.7-x64-ubuntu-16.04.zip
            rm -f z3-4.8.7-x64-ubuntu-16.04.zip
            cp z3-4.8.7-x64-ubuntu-16.04/bin/libz3.a /usr/local/lib
            cp z3-4.8.7-x64-ubuntu-16.04/bin/z3 /usr/local/bin
            cp z3-4.8.7-x64-ubuntu-16.04/include/* /usr/local/include
            rm -rf z3-4.8.7-x64-ubuntu-16.04
            z3 --version

      - checkout
      - add_ssh_keys
      - run: git submodule sync
      - run: git submodule update --init

  cabal_build_and_test:
    description: "Build the project and run the tests"
    parameters:
      cabal_update_command:
        type: string
        default: "cabal v2-update"
      project_file:
        type: string
        default: "cabal.project"
      extra_test_flags:
        type: string
        default: ""
      liquid_runner:
        type: string
        default: "--liquid-runner=cabal v2-run liquidhaskell -- "
      ghc_options:
        type: string
        default: "--ghc-options=\"+RTS -M2G -RTS\""
      setup_test_extra_steps:
        type: string
        default: ""
    steps:
      - setup_project
      - restore_cache:
          keys:
            - cabal-{{ checksum "liquidhaskell.cabal" }}
      - run:
          name: Dependencies
          command: |
            << parameters.cabal_update_command >>
            cabal v2-clean
            cabal v2-build --project-file << parameters.project_file >> -j1 all
      - save_cache:
          key: cabal-{{ checksum "liquidhaskell.cabal" }}
          paths:
            - ~/.cabal/store
            - ./dist-newstyle
      - run:
          name: Setup Test
          command: |
            mkdir -p /tmp/junit/cabal
            << parameters.setup_test_extra_steps >>
      - run:
          name: Test
          command: |
            liquidhaskell_datadir=$PWD cabal v2-test -j1 --project-file << parameters.project_file >> liquidhaskell:test << parameters.extra_test_flags >> --flag include --flag devel --test-show-details=streaming --test-option="<< parameters.liquid_runner >>" --test-options="-t 1200s --xml=/tmp/junit/cabal/main-test-results.xml"
            liquidhaskell_datadir=$PWD cabal v2-test -j1 --project-file << parameters.project_file >> liquidhaskell:liquidhaskell-parser --test-show-details=streaming --test-options="--xml=/tmp/junit/cabal/parser-test-results.xml"
      - store_test_results:
          path: /tmp/junit/cabal
      - store_artifacts:
          path: tests/logs/cur

  stack_build_and_test:
    description: "Build and test the project using Stack"
    parameters:
      stack_yaml_file:
        type: string
        default: "stack.yaml"
      liquid_runner:
        type: string
        default: "stack --silent exec -- liquidhaskell -v0"
      extra_test_flags:
        type: string
        default: ""
    steps:
      - setup_project
      - restore_cache:
          keys:
            - stack-{{ checksum "<< parameters.stack_yaml_file >>" }}
      - run:
          name: Dependencies
          command: |
            stack --stack-yaml << parameters.stack_yaml_file >> setup
            stack --stack-yaml << parameters.stack_yaml_file >> build --only-dependencies --test --no-run-tests
      - save_cache:
          key: stack-{{ checksum "<< parameters.stack_yaml_file >>" }}
          paths:
            - ~/.stack
            - ./.stack-work
      - run:
          name: Test
          command: |
            stack --stack-yaml << parameters.stack_yaml_file >> clean
            mkdir -p /tmp/junit/stack
            stack --stack-yaml << parameters.stack_yaml_file >> test -j1 liquidhaskell:test << parameters.extra_test_flags >> --ta="--liquid-runner \"<< parameters.liquid_runner >>\"" --ta="-t 1200s --xml=/tmp/junit/stack/main-test-results.xml": #--liquid-opts='--cores=1'":
            stack --stack-yaml << parameters.stack_yaml_file >> test -j1 liquidhaskell:liquidhaskell-parser --ta="--xml=/tmp/junit/stack/parser-test-results.xml":
            stack --stack-yaml << parameters.stack_yaml_file >> sdist
            # stack haddock liquidhaskell --flag liquidhaskell:-devel --no-haddock-deps --haddock-arguments="--no-print-missing-docs --odir=$CIRCLE_ARTIFACTS"
            stack --stack-yaml << parameters.stack_yaml_file >> haddock liquidhaskell  --no-haddock-deps --haddock-arguments="--no-print-missing-docs"
      - store_test_results:
          path: /tmp/junit/stack
      - store_artifacts:
          path: tests/logs/cur
      - run:
          name: Dist
          command: stack --stack-yaml << parameters.stack_yaml_file >> sdist

jobs:

  stack_865_legacy_executable:
    docker:
      - image: fpco/stack-build:lts-15.4
    steps:
        - stack_build_and_test:
            stack_yaml_file: "stack-8.6.5.yaml"
            liquid_runner: "stack --stack-yaml=/root/project/stack-8.6.5.yaml --silent exec -- liquid"
            extra_test_flags: "--flag liquidhaskell:include --flag liquid-platform:devel --flag liquidhaskell:no-plugin"

  stack_884_legacy_executable:
    docker:
      - image: fpco/stack-build:lts-16.8
    steps:
        - stack_build_and_test:
            stack_yaml_file: "stack-8.8.4.yaml"
            liquid_runner: "stack --stack-yaml=/root/project/stack-8.8.4.yaml --silent exec -- liquid"
            extra_test_flags: "--flag liquidhaskell:include --flag liquid-platform:devel --flag liquidhaskell:no-plugin"

  stack_810_legacy_executable:
    docker:
      - image: fpco/stack-build:lts-15.4
    steps:
        - stack_build_and_test:
            stack_yaml_file: "stack.yaml"
            liquid_runner: "stack --silent exec -- liquid"
            extra_test_flags: "--flag liquidhaskell:include --flag liquid-platform:devel --flag liquidhaskell:no-plugin"

  stack_810:
    docker:
      - image: fpco/stack-build:lts-15.4
    steps:
        - stack_build_and_test:
            stack_yaml_file: "stack.yaml"
            extra_test_flags: " liquid-platform:liquidhaskell "

  cabal_810:
    docker:
      - image: adinapoli/ghc:8.10.2-bionic-slim
    steps:
      - cabal_build_and_test:
          liquid_runner: "--liquid-runner=cabal -v0 v2-exec liquidhaskell -- -v0 \
                          -package-env=$(./scripts/generate_testing_ghc_env) \
                          -package=liquidhaskell -package=Cabal "

  cabal_900:
    docker:
      - image: adinapoli/ghc:9.0.0.20200925
    steps:
      - cabal_build_and_test:
          cabal_update_command: "cabal v2-update && ./scripts/head.hackage.sh update"
          project_file: "cabal.ghc9.project"
          liquid_runner: "--liquid-runner=cabal -v0 v2-exec --project-file cabal.ghc9.project liquidhaskell -- -v0 \
                          -package-env=$(./scripts/generate_testing_ghc_env cabal.ghc9.project) \
                          -package=liquidhaskell -package=Cabal "

workflows:
  version: 2
  build_stack_and_cabal:
    jobs:
      - stack_865_legacy_executable
      - stack_884_legacy_executable
      - stack_810_legacy_executable
      - stack_810
      - cabal_810
#      - cabal_900
